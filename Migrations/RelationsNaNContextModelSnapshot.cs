// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RelationsNaN.Data;

#nullable disable

namespace RelationsNaN.Migrations
{
    [DbContext(typeof(RelationsNaNContext))]
    partial class RelationsNaNContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gameweshbro", b =>
                {
                    b.Property<int>("gamesId")
                        .HasColumnType("int");

                    b.Property<int>("weshbrosId")
                        .HasColumnType("int");

                    b.HasKey("gamesId", "weshbrosId");

                    b.HasIndex("weshbrosId");

                    b.ToTable("Gameweshbro");
                });

            modelBuilder.Entity("RelationsNaN.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int?>("genreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("genreId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("RelationsNaN.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("RelationsNaN.Models.weshbro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("weshbros");
                });

            modelBuilder.Entity("Gameweshbro", b =>
                {
                    b.HasOne("RelationsNaN.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("gamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RelationsNaN.Models.weshbro", null)
                        .WithMany()
                        .HasForeignKey("weshbrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RelationsNaN.Models.Game", b =>
                {
                    b.HasOne("RelationsNaN.Models.Genre", "genre")
                        .WithMany("games")
                        .HasForeignKey("genreId");

                    b.Navigation("genre");
                });

            modelBuilder.Entity("RelationsNaN.Models.Genre", b =>
                {
                    b.Navigation("games");
                });
#pragma warning restore 612, 618
        }
    }
}
